### YamlMime:Tutorial
title: Créer des machines virtuelles avec Azure PowerShell
metadata:
  title: Créer des machines virtuelles avec Azure PowerShell
  description: Prise en main d’Azure PowerShell en créant des machines virtuelles.
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: azurepowershell
  ms.date: 12/13/2018
  ms.author: sttramer
  author: sptramer
  manager: carmonm
  ms.devlang: azure-powershell
  ms.prod: powershell
  ms.technology: azure-powershell
  ms.topic: tutorial
  clicktale: true
  ms.openlocfilehash: 98fa4e7428104a4b2e61029e04655b8682743cca
  ms.sourcegitcommit: 8f59e11e5c991543964154d63648aa1e6ae22512
  ms.translationtype: HT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 03/26/2019
  ms.locfileid: "58475314"
items:
- durationInMinutes: 1
  content: >-
    Dans ce tutoriel, vous allez découvrir toutes les étapes relatives à la configuration d’une machine virtuelle avec Azure PowerShell. Le didacticiel traite également des requêtes de sortie, de la réutilisation de ressources Azure et du nettoyage des ressources.


    Vous pouvez réaliser ce tutoriel avec l’expérience interactive proposée par Azure Cloud Shell, ou [installer l’interface Azure PowerShell](install-az-ps.md) localement.


    Utilisez __Ctrl-Maj-v__ (__Cmd-Maj-v__ sur macOS) pour coller du texte didactique dans Azure Cloud Shell.
- durationInMinutes: 1
  title: Se connecter
  content: >-
    Si vous utilisez une installation locale d’Azure PowerShell, vous devez vous connecter avant d’effectuer toute autre étape.


    ```powershell-interactive

    Connect-AzAccount

    ```


    Complétez le processus de connexion en suivant les étapes affichées dans votre terminal.
- durationInMinutes: 1
  title: Créer un groupe de ressources
  content: >-
    Dans Azure, toutes les ressources sont allouées dans un groupe de gestion des ressources. Les groupes de ressources proposent des regroupements logiques de ressources, ce qui facilite leur utilisation en tant que collection.

    Pour ce didacticiel, toutes les ressources créées vont dans un seul groupe nommé `TutorialResources`.


    ```powershell-interactive

    New-AzResourceGroup -Name TutorialResources -Location eastus

    ```


    ```Output

    ResourceGroupName : TutorialResources

    Location          : eastus

    ProvisioningState : Succeeded

    Tags              :

    ResourceId        : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources

    ```
- durationInMinutes: 1
  title: Créer des informations d’identification pour la machine virtuelle
  content: >-
    Avant de pouvoir créer une nouvelle machine virtuelle, vous devez créer un objet d’informations d’identification contenant le nom d’utilisateur et un mot de passe pour le compte d’administrateur de la machine virtuelle Windows.


    ```powershell-interactive

    $cred = Get-Credential -Message "Enter a username and password for the virtual machine."

    ```


    Lorsque vous y êtes invité, saisissez le nom d’utilisateur et le mot de passe. L’objet d’informations d’identification en résultant est transmis en tant que paramètre à l’étape suivante.


    ```Output

    Windows PowerShell credential request.

    Enter a username and password for the virtual machine.

    User: tutorAdmin

    Password for user tutorAdmin: *********

    ```
- durationInMinutes: 4
  title: Création d'une machine virtuelle
  content: >-
    Les machines virtuelles dans Azure ont un grand nombre de dépendances. Azure PowerShell crée ces ressources selon les arguments de ligne de commande que vous spécifiez. Pour une meilleure lisibilité, nous utilisons [PowerShell Splatting](/powershell/module/microsoft.powershell.core/about/about_splatting) pour transmettre les paramètres aux applets de commande Azure PowerShell.


    Créez une nouvelle machine virtuelle exécutant Windows.


    ```powershell-interactive

    $vmParams = @{
      ResourceGroupName = 'TutorialResources'
      Name = 'TutorialVM1'
      Location = 'eastus'
      ImageName = 'Win2016Datacenter'
      PublicIpAddressName = 'tutorialPublicIp'
      Credential = $cred
      OpenPorts = 3389
    }

    $newVM1 = New-AzVM @vmParams

    ```

    Une fois la machine virtuelle créée, vous pouvez voir les valeurs de paramètre utilisées ainsi que les ressources Azure créées.

    PowerShell déplace une barre de progression comme indiqué ci-dessous.


    ```Output
     Creating Azure resources
      39% \
      [ooooooooooooooooooooooooooooooooooo                                                                 ]

      Creating TutorialVM1 virtual machine.
    ```


    Une fois que la machine virtuelle est prête, il est possible de consulter les résultats dans le Portail Azure ou en examinant la variable \$newVM1.


    ```powershell-interactive

    $newVM1

    ```


    ```Output

    ResourceGroupName : TutorialResources

    Id                : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM1

    VmId              : 12345678-9abc-def0-1234-56789abcedf0

    Name              : TutorialVM1

    Type              : Microsoft.Compute/virtualMachines

    Location          : eastus

    Tags              : {}

    HardwareProfile   : {VmSize}

    NetworkProfile    : {NetworkInterfaces}

    OSProfile         : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}

    ProvisioningState : Succeeded

    StorageProfile    : {ImageReference, OsDisk, DataDisks}

    ```


    Les valeurs de propriété répertoriées entre accolades sont des objets imbriqués. Au cours de l’étape suivante, nous allons vous montrer comment afficher des valeurs spécifiques dans ces objets imbriqués.
- durationInMinutes: 5
  title: Obtenir des informations sur les machines virtuelles avec des requêtes
  content: >-
    Voyons comment obtenir des informations plus détaillées à partir de la machine virtuelle que nous venons de créer. Dans cet exemple, nous vérifions le nom de la machine virtuelle et le compte d’administrateur que nous avons créé.


    ```powershell-interactive

    $newVM1.OSProfile | Select-Object ComputerName,AdminUserName

    ```


    ```Output

    ComputerName AdminUsername

    ------------ -------------

    TutorialVM1  tutorialAdmin

    ```


    Nous pouvons utiliser les autres commandes Azure PowerShell pour obtenir des informations spécifiques sur la configuration du réseau.


    ```powershell-interactive

    $newVM1 | Get-AzNetworkInterface |
      Select-Object -ExpandProperty IpConfigurations |
        Select-Object Name,PrivateIpAddress
    ```


    Dans cet exemple, nous utilisons le pipeline PowerShell pour envoyer l’objet \$newVM1 à l’applet de commande `Get-AzNetworkInterface`. À partir de l’objet d’interface réseau qui en résulte, nous sélectionnons l’objet IpConfigurations imbriqué. À partir de l’objet IpConfigurations, nous sélectionnons les propriétés Name et PrivateIpAddress.


    ```Output

    Name        PrivateIpAddress

    ----        ----------------

    TutorialVM1 192.168.1.4

    ```


    Pour confirmer que la machine virtuelle est en cours d’exécution, nous devons nous connecter via le Bureau à distance. Pour ce faire, nous devons connaître l’adresse IP publique.


    ```powershell-interactive

    $publicIp = Get-AzPublicIpAddress -Name tutorialPublicIp -ResourceGroupName TutorialResources


    $publicIp | Select-Object Name,IpAddress,@{label='FQDN';expression={$_.DnsSettings.Fqdn}}

    ```


    Dans cet exemple, nous utilisons l’objet `Get-AzPublicIpAddress` et stockons les résultats dans la variable \$publicIp. À partir de cette variable, nous sélectionnons les propriétés et utilisons une expression pour récupérer la propriété Fqdn imbriquée.


    ```Output

    Name             IpAddress           FQDN

    ----             ---------           ----

    tutorialPublicIp <PUBLIC_IP_ADDRESS> tutorialvm1-8a0999.eastus.cloudapp.azure.com

    ```


    À partir de votre machine locale, vous pouvez exécuter la commande suivante pour vous connecter à la machine virtuelle via le Bureau à distance.


    ```powershell-interactive

    mstsc.exe /v <PUBLIC_IP_ADDRESS>

    ```


    Pour plus d’informations sur l’interrogation des propriétés de l’objet, consultez [Querying for Azure resources](./queries-azureps.md) (Interrogation de ressources Azure).
- durationInMinutes: 4
  title: Création d’une nouvelle machine virtuelle sur le sous-réseau existant
  content: >-
    La deuxième machine virtuelle utilise le sous-réseau existant.


    ```powershell-interactive

    $vm2Params = @{
      ResourceGroupName = 'TutorialResources'
      Name = 'TutorialVM2'
      ImageName = 'Win2016Datacenter'
      VirtualNetworkName = 'TutorialVM1'
      SubnetName = 'TutorialVM1'
      PublicIpAddressName = 'tutorialPublicIp2'
      Credential = $cred
      OpenPorts = 3389
    }

    $newVM2 = New-AzVM @vm2Params


    $newVM2

    ```


    ```Output

    ResourceGroupName        : TutorialResources

    Id                       : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM2

    VmId                     : 12345678-9abc-def0-1234-56789abcedf1

    Name                     : TutorialVM2

    Type                     : Microsoft.Compute/virtualMachines

    Location                 : eastus

    Tags                     : {}

    HardwareProfile          : {VmSize}

    NetworkProfile           : {NetworkInterfaces}

    OSProfile                : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}

    ProvisioningState        : Succeeded

    StorageProfile           : {ImageReference, OsDisk, DataDisks}

    FullyQualifiedDomainName : tutorialvm2-dfa5af.eastus.cloudapp.azure.com

    ```


    Vous pouvez ignorer les quelques étapes relatives à l’obtention de l’adresse IP publique de la nouvelle machine virtuelle, dans la mesure où elle est renvoyée dans la propriété FullyQualifiedDomainName de l’objet \$newVM2. Utilisez la commande suivante pour vous connecter à l’aide du Bureau à distance.


    ```powershell-interactive

    mstsc.exe /v $newVM2.FullyQualifiedDomainName

    ```
- durationInMinutes: 4
  title: Nettoyage
  content: >-
    Maintenant que le didacticiel est terminé, il est temps de nettoyer les ressources créées. Vous pouvez supprimer des ressources individuelles avec la commande `Remove-AzResource`, mais la manière la plus sûre de supprimer toutes les ressources dans un groupe de ressources reste de supprimer le groupe à l’aide de la commande `Remove-AzResourceGroup`.


    ```powershell-interactive

    $job = Remove-AzResourceGroup -Name TutorialResources -Force -AsJob


    $job

    ```


    ```Output

    Id     Name            PSJobTypeName   State         HasMoreData     Location             Command

    --     ----            -------------   -----         -----------     --------             -------

    1      Long Running... AzureLongRun... Running       True            localhost            Remove-AzResource...

    ```


    Cette commande supprime les ressources créées durant le didacticiel et assure leur libération dans le bon ordre. Le paramètre `-AsJob` empêche le blocage de PowerShell lors de la suppression. Pour attendre la fin de la suppression, utilisez la commande suivante :


    ```powershell-interactive

    Wait-Job -Id $job.Id

    ```


    Une fois le nettoyage effectué, le didacticiel est terminé. Continuez pour obtenir un résumé de tout ce que vous avez appris et des liens vers des ressources qui vous aideront à effectuer les étapes suivantes.
- durationInMinutes: 1
  title: Résumé
  content: "\nFélicitations ! Vous avez appris à créer des machines virtuelles avec des ressources nouvelles ou existantes, utilisé des expressions et d’autres commandes Azure PowerShell pour capturer des données à stocker dans des variables d’environnement, et examiné certaines ressources créées pour des machines virtuelles Azure.\n\nCe que vous allez faire maintenant dépend de la manière dont vous envisagez d’utiliser Azure PowerShell. Il existe une variété de documents qui approfondissent les fonctionnalités traitées dans ce didacticiel.\n\n### <a name=\"in-depth-azure-powershell-documentation\"></a>Documentation approfondie sur Azure PowerShell\n\nVous souhaiterez peut-être prendre le temps d’explorer l’ensemble de la [documentation relative à Azure PowerShell](overview.md).\n\nPour plus d’informations sur les commandes utilisées dans ce tutoriel, consultez les articles suivants.\n\n- [New-AzResourceGroup](/powershell/module/Az.resources/new-Azresourcegroup)\n- [Get-Credential](/powershell/module/microsoft.powershell.security/get-credential)\n- [New-AzVM](/powershell/module/Az.compute/new-Azvm)\n- [Select-Object](/powershell/module/microsoft.powershell.utility/select-object)\n- [Get-AzPublicIpAddress](/powershell/module/Az.network/get-AzPublicIpAddress)\n- [Remove-AzResourceGroup](/powershell/module/Az.resources/Remove-AzResourceGroup)\n- [Wait-Job](/powershell/module/microsoft.powershell.core/wait-job)\n\nIl existe également des articles qui approfondissent les fonctionnalités qui ont été démontrées dans le tutoriel.\n\n- [PowerShell splatting](/powershell/module/microsoft.powershell.core/about/about_splatting)\n- [Requêtes](queries-azureps.md)\n- [Mise en forme](formatting-output.md)\n- [Utilisation de travaux PowerShell](using-psjobs.md)\n\n### <a name=\"sample-scripts\"></a>Exemples de scripts\n\nSi vous souhaitez commencer immédiatement avec des tâches spécifiques, consultez quelques exemples de scripts.\n\n- [Machines virtuelles Linux](/azure/virtual-machines/linux/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Machines virtuelles Windows](/azure/virtual-machines/windows/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Web Apps](/azure/app-service-web/app-service-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Bases de données SQL](/azure/sql-database/sql-database-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Cosmos DB](/azure/cosmos-db/powershell-samples?toc=%2fpowershell%2fmodules%2ftoc.json)\n\n### <a name=\"feedback\"></a>Commentaires\n\nSi vous souhaitez donner votre avis, proposer des suggestions, ou poser des questions, il existe plusieurs façons de nous contacter.\n\n* `Send-Feedback` est une commande intégrée pour Azure PowerShell qui permet d’envoyer des commentaires de forme libre à l’équipe.\n* Complétez une demande de fonctionnalité ou un rapport de bogues dans le [référentiel Azure PowerShell](https://github.com/Azure/azure-powershell/issues).\n* Posez une question ou obtenez des précisions en signalant un problème dans le [référentiel de documentation Azure PowerShell](https://github.com/MicrosoftDocs/azure-docs-powershell/issues).\n\nNous espérons que vous appréciez l’utilisation d’Azure PowerShell !"
